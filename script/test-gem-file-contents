#! /usr/bin/env ruby
# frozen_string_literal: true

#
#  this script is intended to run as part of the CI test suite.
#
#  it inspects the contents of a commonmarker gem file -- both the files and the gemspec -- to ensure
#  we're packaging what we expect, and that we're not packaging anything we don't expect.
#
#  this file isn't in the `test/` subdirectory because it's intended to be run standalone against a
#  built gem file (and not against the source code or behavior of the gem itself).
#

require "bundler/inline"

gemfile do
  source "https://rubygems.org"
  gem "minitest"
  gem "minitest-reporters"
end

require "yaml"

def usage_and_exit(message = nil)
  puts "ERROR: #{message}" if message
  puts "USAGE: #{File.basename(__FILE__)} <gemfile> [options]"
  exit(1)
end

usage_and_exit if ARGV.include?("-h")
usage_and_exit unless (gemfile = ARGV[0])
usage_and_exit("#{gemfile} does not exist") unless File.file?(gemfile)
usage_and_exit("#{gemfile} is not a gem") unless /\.gem$/.match?(gemfile)
gemfile = File.expand_path(gemfile)

gemfile_contents = Dir.mktmpdir do |dir|
  Dir.chdir(dir) do
    unless system("tar -xf #{gemfile} data.tar.gz")
      raise "could not unpack gem #{gemfile}"
    end

    %x(tar -ztf data.tar.gz).split("\n")
  end
end

gemspec = Dir.mktmpdir do |dir|
  Dir.chdir(dir) do
    unless system("tar -xf #{gemfile} metadata.gz")
      raise "could not unpack gem #{gemfile}"
    end

    YAML.safe_load(
      %x(gunzip -c metadata.gz),
      permitted_classes: [Gem::Specification, Gem::Version, Gem::Dependency, Gem::Requirement, Time, Symbol],
    )
  end
end

if ARGV.include?("-v")
  puts "---------- gemfile contents ----------"
  puts gemfile_contents
  puts
  puts "---------- gemspec ----------"
  puts gemspec.to_ruby
  puts
end

require "minitest/autorun"
require "minitest/reporters"
Minitest::Reporters.use!([Minitest::Reporters::SpecReporter.new])

puts "Testing '#{gemfile}' (#{gemspec.platform})"
describe File.basename(gemfile) do
  let(:cross_rubies_path) { File.join(File.dirname(__FILE__), "..", ".cross_rubies") }

  let(:platform_supported_ruby_versions) do
    File.read(cross_rubies_path).split("\n").filter_map do |line|
      ver, plat = line.split(":")
      next if plat != gemspec.platform.to_s

      ver.split(".").take(2).join(".") # ugh
    end.uniq.sort
  end

  let(:all_supported_ruby_versions) do
    File.read(cross_rubies_path).split("\n").map do |line|
      ver, _ = line.split(":")
      ver.split(".").take(2).join(".") # ugh
    end.uniq.sort
  end

  describe "setup" do
    it "gemfile contains some files" do
      actual = gemfile_contents.length
      assert_operator(actual, :>, 8, "expected gemfile to contain more than #{actual} files")
    end

    it "gemspec is a Gem::Specification" do
      assert_equal(Gem::Specification, gemspec.class)
    end
  end

  describe "all platforms" do
    it "contains every ruby file in lib/" do
      expected = %x(git ls-files lib).split("\n").grep(/\.rb$/).sort
      skip "looks like this isn't a git repository" if expected.empty?
      actual = gemfile_contents.grep(%r{^lib/}).grep(/\.rb$/).sort
      assert_equal(expected, actual)
    end
  end

  describe "ruby platform" do
    it "depends on mini_portile2" do
      assert(gemspec.dependencies.find { |d| d.name == "mini_portile2" })
    end

    it "contains ext/commonmarker C and header files" do
      assert_equal(gemfile_contents.grep(%r{^ext/commonmarker/.*\.c}).length, 1)
      assert_equal(gemfile_contents.grep(%r{^ext/commonmarker/.*\.h}).length, 1)
    end

    it "contains the port files" do
      actual_ports = gemfile_contents.grep(%r{^ports/})
      assert_equal(1, actual_ports.grep(/comrak-(?:\d+\.\d+\.\d+|[a-z0-9]{40}).tar\.[gx]z/).length,
        "expected #{actual_ports} to include comrak")
      assert_equal(1, actual_ports.length)
    end

    it "does not contain packaged libraries' header files" do
      # these files are present after installation if the packaged libraries are used
      assert_empty(gemfile_contents.grep(%r{^ext/commonmarker/include/}))
    end
  end if gemspec.platform == Gem::Platform::RUBY

  describe "native platform" do
    it "does not depend on mini_portile2" do
      refute(gemspec.dependencies.find { |d| d.name == "mini_portile2" })
    end

    it "contains ext/commonmarker C and header files" do
      assert_equal(gemfile_contents.grep(%r{^ext/commonmarker/.*\.c}).length, 1)
      # second is comrak_ffi.h
      assert_equal(gemfile_contents.grep(%r{^ext/commonmarker/.*\.h}).length, 2)
    end

    it "does not contain the port files" do
      assert_empty(gemfile_contents.grep(%r{^ports/}))
    end

    it "does not contain the patch files" do
      assert_empty(gemfile_contents.grep(%r{^patches/}))
    end

    it "contains packaged libraries' header files" do
      assert_includes(gemfile_contents, "ext/commonmarker/include/comrak_ffi.h")
    end

    it "contains expected shared library files" do
      platform_supported_ruby_versions.each do |version|
        actual = gemfile_contents.find do |file|
          File.fnmatch?("lib/commonmarker/#{version}/commonmarker.{so,bundle}", file, File::FNM_EXTGLOB)
        end
        assert(actual, "expected to find shared library file for ruby #{version}")
      end

      actual = gemfile_contents.find do |file|
        File.fnmatch?("lib/commonmarker/commonmarker.{so,bundle}", file, File::FNM_EXTGLOB)
      end
      refute(actual, "did not expect to find shared library file in lib/commonmarker")

      actual = gemfile_contents.find_all do |file|
        File.fnmatch?("lib/commonmarker/**/*.{so,bundle}", file, File::FNM_EXTGLOB)
      end
      assert_equal(
        platform_supported_ruby_versions.length,
        actual.length,
        "did not expect extra shared library files",
      )
    end

    it "sets required_ruby_version appropriately" do
      unsupported_versions = all_supported_ruby_versions - platform_supported_ruby_versions
      platform_supported_ruby_versions.each do |v|
        assert(
          gemspec.required_ruby_version.satisfied_by?(Gem::Version.new(v)),
          "required_ruby_version='#{gemspec.required_ruby_version}' should support ruby #{v}",
        )
      end
      unsupported_versions.each do |v|
        refute(
          gemspec.required_ruby_version.satisfied_by?(Gem::Version.new(v)),
          "required_ruby_version='#{gemspec.required_ruby_version}' should not support ruby #{v}",
        )
      end
    end
  end if gemspec.platform.is_a?(Gem::Platform) && gemspec.platform.cpu
end
